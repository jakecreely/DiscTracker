name: CI

on:
  pull_request: 
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  unit_tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.12"]

    defaults:
      run:
        working-directory: DiscTracker

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: "Checkout Repo"
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Tests With Coverage
      env:
        DEBUG: ${{ secrets.DEBUG }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_HOST: db
        DATABASE_NAME: db
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_PORT: 5432
        REDIS_URL: redis://redis:6379/0
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
        DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
      run: |
        coverage run -m pytest ./tests/unit

    - name: Display Coverage Report
      run: |
        coverage report

    - name: Enforce Coverage Threshold
      run: |
        COVERAGE_PERCENTAGE=$(coverage report | tail -n 1 | awk '{print $4}' | sed 's/%//')
        if (( $(echo "$COVERAGE_PERCENTAGE < 90" | bc -l) )); then
          echo "Test coverage is below 90%, current coverage: $COVERAGE_PERCENTAGE%"
          exit 1 
        fi
      # Exit 1 for terminated unsuccessfully (GitHub actions to understand it failed)

  lint_check: 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v4
  
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install ruff
        run: pip install ruff

      - name: Run ruff check
        run: ruff check

  build_and_push:
    needs: ["lint_check", "unit_tests"]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ./DiscTracker
          file: ./DiscTracker/Dockerfile.ci
          tags: ${{ secrets.DOCKER_USERNAME }}/disc-tracker:${{ github.sha }}

  integration_tests:
    needs: build_and_push
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.12"]

    defaults:
      run:
        working-directory: DiscTracker

    steps:
    - name: "Checkout Repo"
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build and run docker compose
      run: |
        docker compose -f docker-compose.ci.yml up -d --build
      env:
        DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/disc-tracker:${{ github.sha }}
        DEBUG: ${{ secrets.DEBUG }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_HOST: db
        DATABASE_NAME: db
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: db
        REDIS_URL: redis://redis:6379/0
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
        DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}

  #   command: ["/bin/sh", "-c", "/app/scripts/wait-for-it.sh db:5432 -- && pytest /app/tests/integration"]

    - name: Run Integration Tests
      run: |
        docker compose exec app /bin/sh -c "/app/scripts/wait-for-it.sh db:5432 -- && pytest /app/tests/integration"
      env:
        DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/disc-tracker:${{ github.sha }}
        DEBUG: ${{ secrets.DEBUG }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_HOST: db
        DATABASE_NAME: db
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: db
        REDIS_URL: redis://redis:6379/0
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
        DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
