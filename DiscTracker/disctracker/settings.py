"""
Django settings for disctracker project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import environ
import os

env = environ.Env()

env_file = os.path.join(os.path.dirname(__file__), "../.env")
environ.Env.read_env(env_file)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Define the logs directory path
LOGS_DIR = os.path.join(BASE_DIR, "logs")

# Create the logs directory if it doesn't exist
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "items.apps.ItemsConfig",
    "crispy_forms",
    "crispy_bootstrap4",
    "django_celery_beat",
    "allauth",
    "allauth.account",
]

# Crisps Forms

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"

CRISPY_TEMPLATE_PACK = "bootstrap4"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "disctracker.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "disctracker/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# AllAuth Configuration
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
ACCOUNT_EMAIL_REQUIRED = True

WSGI_APPLICATION = "disctracker.wsgi.application"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",  # How the variables will be formatted - { means str.format()
        },
        "simple": {
            "format": "{levelname} {message}",  # Outputs the log level and then the message
            "style": "{",  # How the string (levelname) and message variable with be formatted - { means str.format()
        },
    },
    "handlers": {
        "console": {  # Name of the handler
            "level": "DEBUG",  # Handles any logs DEBUG or higher
            "class": "logging.StreamHandler",  # Logs to a stream
            "formatter": "simple",  # Uses simple formatter
        },
        "django_file": {  # Name of the handler
            "level": "WARNING",  # Handles WARNING or higher
            "class": "logging.FileHandler",  # Writes logs to a file
            "filename": "logs/django_warnings.log",  # Path to log file
            "formatter": "verbose",  # Specifies the verbose formatter
        },
        "items_file": {  # Name of the handler
            "level": "ERROR",  # Handles ERROR or higher
            "class": "logging.FileHandler",  # Writes logs to a file
            "filename": "logs/items_errors.log",  # Path to log file
            "formatter": "verbose",  # Specifies the verbose formatter
        },
    },
    "loggers": {
        "django": {  # Generated by django
            "handlers": ["console", "django_file"],  # Handled by both handlers
            "propagate": True,
        },
        "django.requests": {  #
            "handlers": [
                "django_file"
            ],  # Outputs to the file handler but not the console
            "level": "ERROR",  # Only ERROR or higher
            "propagate": False,  # Doesn't propagate to django logger won't handle these errors only this logger will
        },
        "items": {  # Custom logger for items app
            "handlers": ["console", "items_file"],  # Logs to both handlers
            "level": "INFO",  # Any messages INFO or higher
            "propagate": False,  # Doesn't propagate to
        },
    },
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("DATABASE_NAME"),
        "USER": env("DATABASE_USER"),
        "PASSWORD": env("DATABASE_PASSWORD"),
        "HOST": env("DATABASE_HOST"),
        "PORT": env("DATABASE_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "auth.User"

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery Configuration Options
CELERY_BROKER_URL = env("REDIS_URL")
CELERY_RESULT_BACKEND = env("REDIS_URL")
